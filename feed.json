{
    "version": "https://jsonfeed.org/version/1",
    "title": "Flight Computing",
    "description": "",
    "home_page_url": "https://flightcomp.github.io/website",
    "feed_url": "https://flightcomp.github.io/website/feed.json",
    "user_comment": "",
    "author": {
        "name": "Roberto Chao"
    },
    "items": [
        {
            "id": "https://flightcomp.github.io/website/climb-rate-computing.html",
            "url": "https://flightcomp.github.io/website/climb-rate-computing.html",
            "title": "Climb rate computing",
            "summary": "To obtain the climb or descent rate we must take the derivative of the pressure signal with respect to time and apply the equation. $$\\frac{dp}{dh}=-\\frac{g}{R*T} * p \\to \\frac{dh}{dt} = -\\frac{dp}{dt}*\\frac{R*T}{g*p}$$ Derived from the hydrostatic equation and the ideal gas law, the basic physical equations used&hellip;",
            "content_html": "<p>To obtain the climb or descent rate we must take the derivative of the pressure signal with respect to time and apply the equation.</p>\n<p>$$\\frac{dp}{dh}=-\\frac{g}{R*T} * p \\to \\frac{dh}{dt} = -\\frac{dp}{dt}*\\frac{R*T}{g*p}$$</p>\n<p>Derived from the hydrostatic equation and the ideal gas law, the basic physical equations used for modeling the atmosphere.</p>\n<p>In this article we're going to explore the problems of taking this derivative from pressure data obtained from meteorological or first-fix gps purpose pressure sensors, some smartphones have built-in (Bosch Sensortec BMP180, BMP280).</p>\n<p>When used for free flight, the two most valuable features of a pressure sensor are frequency bandwith and precission. Newest pressure sensors improve precission in regard to oldest ones in some modes of operation because they feature an internal IIR filter that, on the other hand, reduces bandwith well below 2 Hz. For flight purposes we need at least 5 Hz of frequency bandwith and data sampling rates above 10 samples per second what makes this modes of operation unusable. Therefore we have to select a mode of operation that switches the IIR filter off raising precission to around 25 cm (0.03 hPa). If x[n] represents the noise signal added to the true pressure at the moment nT where T is de sampling period in seconds, the derivative of the pressure readings of a static sensor would be:</p>\n<p>$$y[n]=\\frac{x[n+1]-x[n]}{T}$$</p>\n<p>Assuming uncorrelated noise, the standard deviation (RMS) of the derivative signal is:</p>\n<p>$$\\sigma_y=\\frac {{\\sqrt 2} \\sigma_x}{T}$$</p>\n<p>Which in the case above gives an unacceptable RMS error of 3.53 m/s in the climb/descent rate. Low pass pre-filtering of the pressure signal before making the derivative is not an option because a low-pass filter reduces bandwith and also adds delay.</p>\n<p>Fortunately a smartphone has more sensors. One of them is a tri-axial accelerometer which detects the accelerations of the phone. We are interested in the vertical component of the acceleration after substracting gravity. We integrate this signal over time to obtain an estimation of vertical speed and integrate it once more to obtain height.</p>\n<p>Whereas differentiation enhances high-frequency noise, integration enhances low-frequency noise, commonly known as drift. To correct for this drift we use the sensor pressure readings. This is implemented with a kalman-filter that combines both signals weighting each one in inverse proportion to its RMS.</p>\n<p>It's relatively straightforward to obtain the typical RMS of both sensors from their datasheets or we can get this values from experimental data. Analysing data collected from the BMA220 accelerometer we can confirm that RMS noise is ten times smaller than that of the barometer BMP180 in the same smartphone. Furthermore we have detected a zero-point error of 0.1 m/s<sup>2</sup>. This states the importance of calibrating phone sensors before making any measurement. There are a lot of apps that perform this calibration proccess or you can run a calibration inside your flight app.</p>\n<p><img class=\"post__image post__image--center\" src=\"https://flightcomp.github.io/website/media/posts/2/magneto_dynamic.png\" width=\"1853\" height=\"1025\"></p>\n<p>The upper graph in the figure above represents the altitude output of the kalman filter (red solid line) superimposed to the data got from the barometer (black line). The lower graph represents the vertical speed output of the kalman filter superimposed to the data got from the accelerometer when we lift the phone two meters from the floor. Almost perfect!</p>\n<p>However when we simulate strong climb/descent rates, severe inaccuracies in the accelerometer make their appareance leading to unacceptable drift in the altitude signal, and rebounds in the vertical speed signal. See the figure below.</p>\n<p><img class=\"post__image post__image--center\" src=\"https://flightcomp.github.io/website/media/posts/2/kalman_fails.png\" width=\"1853\" height=\"1025\"></p>\n<p>Reducing the weight of the accelerometer readings over the barometer readings we  reduce drift and rebounds but we increase noise. See the figure below.</p>\n<p><img class=\"post__image post__image--center\" src=\"https://flightcomp.github.io/website/media/posts/2/kalman_fails2.png\" alt=\"\" width=\"1853\" height=\"1025\"></p>\n<p class=\"msg msg--success\">The blue line corresponds to the output of our optimized algorithm. Using it we can reduce RMS noise in the vertical speed to 0.07 m/s with a fairly acceptable delay.</p>",
            "image": "https://flightcomp.github.io/website/media/posts/2/kalman2.png",
            "author": {
                "name": "Roberto Chao"
            },
            "tags": [
            ],
            "date_published": "2020-04-08T22:06:59+02:00",
            "date_modified": "2020-04-13T17:22:47+02:00"
        },
        {
            "id": "https://flightcomp.github.io/website/glide-computers.html",
            "url": "https://flightcomp.github.io/website/glide-computers.html",
            "title": "Wind computing",
            "summary": "One of the main features of today glide computers is the estimation of wind, the speed and direction of the air mass inside we're moving (blue arrow). It's the base of other estimations like the required time and altitude to reach a waypoint. When we sum this vectorial magnitude&hellip;",
            "content_html": "<p class=\"dropcap\">One of the main features of today glide computers is the estimation of wind, the speed and direction of the air mass inside we're moving (blue arrow). It's the base of other estimations like the required time and altitude to reach a waypoint. When we sum this vectorial magnitude to the airspeed (green arrow) we obtain the ground speed measured by the gps of the flight instrument (red arrow).<img class=\"post__image post__image--left\" src=\"https://flightcomp.github.io/website/media/posts/1/Flechas2.png\" alt=\"Vectorial sum\" width=\"192\" height=\"216\"></p>\n<p>So the the procedure to obtain the wind is as simple as substract the air speed to the ground speed given by the gps. Some expensive glide instruments have a true airspeed probe but the vast majority don't. How the latter manage to estimate the wind speed and direction?</p>\n<p>In fact they don't estimate the instant wind speed and direction but an <em>average</em>. They make one more assumption. The airspeed, though unknown, is constant. Making this two assumptions and taking the ground speed measured by the gps in at least three different moments we can pose a resolvable system of equations.</p>\n<p>We don't want to bore you with the mathematical calculations but they are roughly similar to derive the geometric 3D plane from three points it passes through. When we add noise to the position of this three points, just as it happens with the gps data, and the points are near each other, the solution of the system of equations can lead us to a completely different plane. It's what we call an ill-posed problem. To avoid it we must take more than three points and make sure they are far enough from each other.</p>\n<p>In the present case that means taking ground speed samples along a time window sufficiently long and in a wide range of directions of flight. However, if we take a time window too long it won't record variations in the average wind due to changes in the weather conditions or changes of the flight area. A time window of 10 min. is short enough to detect meteorological and geographical changes of wind in the scale of 5 km while still providing a reliable estimate.</p>\n<p>Nevertheless the wind also changes with altitude. Sometimes suddenly when we move from one air layer on to another one. At a climb rate of 2m/s during 10 min we can climb up 1200 m. Enough difference in altitude for the wind average to significantly change two or three times. If we use a 10 min. time window this changes will inadvertently pass because they will be averaged.</p>\n<p>Our algorithm uses a variable lenght time window and records changes in wind speed and direction with the altitude.</p>\n<p> </p>",
            "image": "https://flightcomp.github.io/website/media/posts/1/IMG-20170720-WA0007.jpg",
            "author": {
                "name": "Roberto Chao"
            },
            "tags": [
            ],
            "date_published": "2020-04-07T16:38:47+02:00",
            "date_modified": "2020-04-08T19:47:32+02:00"
        }
    ]
}
